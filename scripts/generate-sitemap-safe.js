#!/usr/bin/env node

/**
 * ÏïàÏ†ÑÌïú ÎèôÏ†Å sitemap.xml ÏÉùÏÑ± Ïä§ÌÅ¨Î¶ΩÌä∏
 * Firebase Ïó∞Í≤∞ Ïã§Ìå® Ïãú Í∏∞Î≥∏ sitemap ÏÉùÏÑ±
 */

import fs from 'fs';
import path from 'path';

const SITE_URL = 'https://marlang-app.web.app';

// Í∏∞Î≥∏ sitemap ÏÉùÏÑ± Ìï®Ïàò
function generateBasicSitemap() {
  const today = new Date().toISOString().split('T')[0];
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <!-- Î©îÏù∏ ÌéòÏù¥ÏßÄ -->
  <url>
    <loc>${SITE_URL}/</loc>
    <lastmod>${today}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  
  <!-- Ïπ¥ÌÖåÍ≥†Î¶¨ ÌéòÏù¥ÏßÄÎì§ -->
  <url>
    <loc>${SITE_URL}/tech</loc>
    <lastmod>${today}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>
  <url>
    <loc>${SITE_URL}/business</loc>
    <lastmod>${today}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>
  <url>
    <loc>${SITE_URL}/politics</loc>
    <lastmod>${today}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>
  <url>
    <loc>${SITE_URL}/culture</loc>
    <lastmod>${today}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>
  <url>
    <loc>${SITE_URL}/world</loc>
    <lastmod>${today}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>
  
  <!-- Í∏∞Îä• ÌéòÏù¥ÏßÄÎì§ -->
  <url>
    <loc>${SITE_URL}/search</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
  </url>
  <url>
    <loc>${SITE_URL}/wordbook</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
  </url>
  
  <!-- Ï†ïÏ±Ö ÌéòÏù¥ÏßÄÎì§ -->
  <url>
    <loc>${SITE_URL}/privacy</loc>
    <lastmod>${today}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.5</priority>
  </url>
  <url>
    <loc>${SITE_URL}/contact</loc>
    <lastmod>${today}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.5</priority>
  </url>
  
  <!-- ÏÉòÌîå Í∏∞ÏÇ¨ URLÎì§ (Ïã§Ï†ú Í∏∞ÏÇ¨ IDÎ°ú ÍµêÏ≤¥ ÌïÑÏöî) -->
  <url>
    <loc>${SITE_URL}/article/sample-tech-article-1</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>${SITE_URL}/article/sample-science-article-1</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
  <url>
    <loc>${SITE_URL}/article/sample-business-article-1</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
</urlset>`;
}

// FirebaseÎ•º ÏÇ¨Ïö©Ìïú ÎèôÏ†Å sitemap ÏÉùÏÑ± ÏãúÎèÑ
async function generateDynamicSitemap() {
  try {
    // ÎèôÏ†Å importÎ°ú Firebase Î™®Îìà Î°úÎìú
    const { initializeApp } = await import('firebase/app');
    const { getFirestore, collection, getDocs } = await import('firebase/firestore');
    const dotenv = await import('dotenv');
    
    // ÌôòÍ≤ΩÎ≥ÄÏàò Î°úÎìú
    dotenv.config();
    
    const firebaseConfig = {
      apiKey: process.env.VITE_FIREBASE_API_KEY,
      authDomain: process.env.VITE_FIREBASE_AUTH_DOMAIN,
      projectId: process.env.VITE_FIREBASE_PROJECT_ID,
      storageBucket: process.env.VITE_FIREBASE_STORAGE_BUCKET,
      messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
      appId: process.env.VITE_FIREBASE_APP_ID
    };
    
    if (!firebaseConfig.projectId) {
      throw new Error('Firebase Project IDÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
    }
    
    console.log('üîÑ FirebaseÏóêÏÑú Í∏∞ÏÇ¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Îäî Ï§ë...');
    
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    
    // Í∏∞ÏÇ¨ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const articlesCol = collection(db, 'articles');
    const articleSnapshot = await getDocs(articlesCol);
    
    const publishedArticles = articleSnapshot.docs
      .map(doc => ({ id: doc.id, ...doc.data() }))
      .filter(article => article.status === 'published')
      .sort((a, b) => new Date(b.publishedAt) - new Date(a.publishedAt));
    
    console.log(`üì∞ Î∞úÌñâÎêú Í∏∞ÏÇ¨ ${publishedArticles.length}Í∞ú Î∞úÍ≤¨`);
    
    if (publishedArticles.length === 0) {
      throw new Error('Î∞úÌñâÎêú Í∏∞ÏÇ¨Í∞Ä ÏóÜÏäµÎãàÎã§.');
    }
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    let categories = [];
    try {
      const configCol = collection(db, 'config');
      const configSnapshot = await getDocs(configCol);
      
      configSnapshot.docs.forEach(doc => {
        if (doc.id === 'categories' && doc.data().list) {
          categories = doc.data().list.filter(cat => cat.type === 'category');
        }
      });
    } catch (error) {
      console.log('‚ö†Ô∏è Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†ïÎ≥¥ ÏÇ¨Ïö© Í∏∞Î≥∏Í∞í');
      categories = [
        { id: 'tech', name: 'Technology' },
        { id: 'business', name: 'Business' },
        { id: 'politics', name: 'Politics' },
        { id: 'culture', name: 'Culture' },
        { id: 'world', name: 'World' }
      ];
    }
    
    // ÎèôÏ†Å sitemap XML ÏÉùÏÑ±
    const today = new Date().toISOString().split('T')[0];
    let sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  <!-- Î©îÏù∏ ÌéòÏù¥ÏßÄ -->
  <url>
    <loc>${SITE_URL}/</loc>
    <lastmod>${today}</lastmod>
    <changefreq>daily</changefreq>
    <priority>1.0</priority>
  </url>
  
`;
    
    // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌéòÏù¥ÏßÄ Ï∂îÍ∞Ä
    categories.forEach(category => {
      sitemap += `  <url>
    <loc>${SITE_URL}/${category.id}</loc>
    <lastmod>${today}</lastmod>
    <changefreq>daily</changefreq>
    <priority>0.9</priority>
  </url>
`;
    });
    
    sitemap += `
  <!-- Í∏∞Îä• ÌéòÏù¥ÏßÄÎì§ -->
  <url>
    <loc>${SITE_URL}/search</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
  </url>
  <url>
    <loc>${SITE_URL}/wordbook</loc>
    <lastmod>${today}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.7</priority>
  </url>
  
  <!-- Ï†ïÏ±Ö ÌéòÏù¥ÏßÄÎì§ -->
  <url>
    <loc>${SITE_URL}/privacy</loc>
    <lastmod>${today}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.5</priority>
  </url>
  <url>
    <loc>${SITE_URL}/contact</loc>
    <lastmod>${today}</lastmod>
    <changefreq>monthly</changefreq>
    <priority>0.5</priority>
  </url>
  
  <!-- Í∞úÎ≥Ñ Í∏∞ÏÇ¨Îì§ -->
`;
    
    // Í∞úÎ≥Ñ Í∏∞ÏÇ¨ URL Ï∂îÍ∞Ä
    publishedArticles.forEach(article => {
      const lastmod = article.updatedAt || article.publishedAt || today;
      const formattedDate = new Date(lastmod).toISOString().split('T')[0];
      
      sitemap += `  <url>
    <loc>${SITE_URL}/article/${article.id}</loc>
    <lastmod>${formattedDate}</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.8</priority>
  </url>
`;
    });
    
    sitemap += `</urlset>`;
    
    console.log(`‚úÖ ÎèôÏ†Å sitemap ÏÉùÏÑ± ÏÑ±Í≥µ! (${publishedArticles.length}Í∞ú Í∏∞ÏÇ¨ Ìè¨Ìï®)`);
    
    // ÌÜµÍ≥Ñ Ï∂úÎ†•
    console.log('\nüìà ÏÇ¨Ïù¥Ìä∏Îßµ ÌÜµÍ≥Ñ:');
    console.log(`- Î©îÏù∏ ÌéòÏù¥ÏßÄ: 1Í∞ú`);
    console.log(`- Ïπ¥ÌÖåÍ≥†Î¶¨ ÌéòÏù¥ÏßÄ: ${categories.length}Í∞ú`);
    console.log(`- Í∏∞ÏÇ¨ ÌéòÏù¥ÏßÄ: ${publishedArticles.length}Í∞ú`);
    console.log(`- Í∏∞ÌÉÄ ÌéòÏù¥ÏßÄ: 4Í∞ú`);
    console.log(`- Ï¥ù URL Ïàò: ${publishedArticles.length + categories.length + 5}Í∞ú`);
    
    return sitemap;
    
  } catch (error) {
    console.log(`‚ö†Ô∏è ÎèôÏ†Å sitemap ÏÉùÏÑ± Ïã§Ìå®: ${error.message}`);
    return null;
  }
}

// Î©îÏù∏ Ïã§Ìñâ Ìï®Ïàò
async function main() {
  console.log('üöÄ Sitemap ÏÉùÏÑ± ÏãúÏûë...');
  
  let sitemap;
  
  // 1. ÎèôÏ†Å sitemap ÏÉùÏÑ± ÏãúÎèÑ
  sitemap = await generateDynamicSitemap();
  
  // 2. Ïã§Ìå® Ïãú Í∏∞Î≥∏ sitemap ÏÇ¨Ïö©
  if (!sitemap) {
    console.log('üìù Í∏∞Î≥∏ sitemapÏùÑ ÏÉùÏÑ±Ìï©ÎãàÎã§...');
    sitemap = generateBasicSitemap();
    console.log('‚úÖ Í∏∞Î≥∏ sitemap ÏÉùÏÑ± ÏôÑÎ£å');
  }
  
  // 3. ÌååÏùº Ï†ÄÏû•
  try {
    const sitemapPath = path.join(process.cwd(), 'public', 'sitemap.xml');
    fs.writeFileSync(sitemapPath, sitemap, 'utf8');
    
    console.log(`üìç Sitemap Ï†ÄÏû• ÏôÑÎ£å: ${sitemapPath}`);
    console.log('\nüéâ Sitemap ÏÉùÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!');
    
    // ÌååÏùº ÌÅ¨Í∏∞ ÌôïÏù∏
    const stats = fs.statSync(sitemapPath);
    console.log(`üìä ÌååÏùº ÌÅ¨Í∏∞: ${Math.round(stats.size / 1024)}KB`);
    
  } catch (error) {
    console.error('üö® ÌååÏùº Ï†ÄÏû• Ïã§Ìå®:', error.message);
    process.exit(1);
  }
}

// Ïã§Ìñâ
main().catch(error => {
  console.error('üö® ÏπòÎ™ÖÏ†Å Ïò§Î•ò:', error);
  process.exit(1);
});