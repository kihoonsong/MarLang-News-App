import React, { createContext, useContext, useState, useEffect } from 'react';
import { useAuth } from './AuthContext';
import { db } from '../config/firebase';
import { doc, getDoc, setDoc, updateDoc, deleteDoc, collection, addDoc, serverTimestamp } from 'firebase/firestore';

const DataContext = createContext();

export const useData = () => {
  const context = useContext(DataContext);
  if (!context) {
    console.error('useData must be used within a DataProvider');
    // Í∏∞Î≥∏Í∞í Î∞òÌôòÌïòÏó¨ ÏóêÎü¨ Î∞©ÏßÄ
    return {
      savedWords: [],
      likedArticles: [],
      userSettings: {},
      viewRecords: [],
      isLoading: false,
      syncError: null,
      isOnline: true,
      addWord: () => false,
      removeWord: () => {},
      sortWords: () => {},
      isWordSaved: () => false,
      toggleLike: () => false,
      isArticleLiked: () => false,
      addLikedArticle: () => false,
      removeLikedArticle: () => false,
      sortLikedArticles: () => {},
      addViewRecord: () => {},
      updateActivityTime: () => {},
      getArticleById: () => null,
      updateSettings: () => {},
      getStats: () => ({ totalWords: 0, totalLikedArticles: 0, wordsThisWeek: 0, favoriteCategory: {} })
    };
  }
  return context;
};

export const DataProvider = ({ children }) => {
  const { user } = useAuth();
  
  // Îã®Ïñ¥Ïû• ÏÉÅÌÉú
  const [savedWords, setSavedWords] = useState([]);
  
  // Ï¢ãÏïÑÏöî ÏÉÅÌÉú
  const [likedArticles, setLikedArticles] = useState([]);
  
  // Ï°∞Ìöå Í∏∞Î°ù ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [viewRecords, setViewRecords] = useState([]);
  
  // ÎèôÍ∏∞Ìôî ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [isLoading, setIsLoading] = useState(true);
  const [syncError, setSyncError] = useState(null);
  const [isOnline, setIsOnline] = useState(true);
  
  // ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï
  const [userSettings, setUserSettings] = useState({
    language: 'en',
    translationLanguage: 'ko', // Î≤àÏó≠ ÎåÄÏÉÅ Ïñ∏Ïñ¥ (Í∏∞Î≥∏: ÌïúÍµ≠Ïñ¥)
    ttsSpeed: 0.8, // TTS ÏÜçÎèÑ (Ïã§Ï†ú ÏûëÎèô)
    autoSaveWords: true, // ÏûêÎèô Îã®Ïñ¥ Ï†ÄÏû• (Ïã§Ï†ú ÏûëÎèô)
    autoPlay: false, // TTS ÏûêÎèô Ïû¨ÏÉù (Ïã§Ï†ú ÏûëÎèô) 
    highlightSavedWords: true, // Ï†ÄÏû•Îêú Îã®Ïñ¥ ÌïòÏù¥ÎùºÏù¥Ìä∏ (Ïã§Ï†ú ÏûëÎèô)
    lastVisited: new Date().toISOString(),
    lastActivityTime: new Date().toISOString()
  });

  // FirebaseÏóêÏÑú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadUserData = async () => {
    setIsLoading(true);
    setSyncError(null);
    
    if (!user?.uid) {
      console.log('ÏÇ¨Ïö©ÏûêÍ∞Ä Î°úÍ∑∏Ïù∏ÌïòÏßÄ ÏïäÏùå - Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©');
      loadLocalData();
      setIsLoading(false);
      return;
    }

    try {
      console.log('üî• FirebaseÏóêÏÑú ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë...', user.uid);
      
      // Îã®Ïñ¥Ïû• Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const savedWordsRef = doc(db, 'users', user.uid, 'data', 'savedWords');
      const savedWordsSnap = await getDoc(savedWordsRef);
      if (savedWordsSnap.exists()) {
        const data = savedWordsSnap.data();
        setSavedWords(data.words || []);
        console.log('‚úÖ Îã®Ïñ¥Ïû• Îç∞Ïù¥ÌÑ∞ Î°úÎìúÎê®:', data.words?.length || 0, 'Í∞ú');
      } else {
        setSavedWords([]);
      }

      // Ï¢ãÏïÑÏöî Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const likedArticlesRef = doc(db, 'users', user.uid, 'data', 'likedArticles');
      const likedArticlesSnap = await getDoc(likedArticlesRef);
      if (likedArticlesSnap.exists()) {
        const data = likedArticlesSnap.data();
        setLikedArticles(data.articles || []);
        console.log('‚úÖ Ï¢ãÏïÑÏöî Îç∞Ïù¥ÌÑ∞ Î°úÎìúÎê®:', data.articles?.length || 0, 'Í∞ú');
      } else {
        setLikedArticles([]);
      }

      // ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Î°úÎìú
      const settingsRef = doc(db, 'users', user.uid, 'data', 'settings');
      const settingsSnap = await getDoc(settingsRef);
      if (settingsSnap.exists()) {
        const data = settingsSnap.data();
        setUserSettings(prev => ({
          ...prev,
          ...data.settings
        }));
        console.log('‚úÖ ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Î°úÎìúÎê®');
      }

      // Ï°∞Ìöå Í∏∞Î°ù Î°úÎìú
      const viewRecordsRef = doc(db, 'users', user.uid, 'data', 'viewRecords');
      const viewRecordsSnap = await getDoc(viewRecordsRef);
      if (viewRecordsSnap.exists()) {
        const data = viewRecordsSnap.data();
        setViewRecords(data.records || []);
        console.log('‚úÖ Ï°∞Ìöå Í∏∞Î°ù Î°úÎìúÎê®:', data.records?.length || 0, 'Í∞ú');
      } else {
        setViewRecords([]);
      }

      setIsLoading(false);
      console.log('‚úÖ Î™®Îì† ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å');
      
    } catch (error) {
      console.error('‚ùå Firebase Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      setSyncError(`Îç∞Ïù¥ÌÑ∞ ÎèôÍ∏∞Ìôî Ïã§Ìå®: ${error.message}`);
      setIsOnline(false);
      
      // Ïò§Î•ò Ïãú Î°úÏª¨ Îç∞Ïù¥ÌÑ∞Î°ú Ìè¥Î∞±
      console.log('üîÑ Î°úÏª¨ Îç∞Ïù¥ÌÑ∞Î°ú Ìè¥Î∞±...');
      loadLocalData();
      setIsLoading(false);
    }
  };

  // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î°úÎìú (Í≤åÏä§Ìä∏ Î™®Îìú ÎòêÎäî Ïò§Î•ò Ïãú)
  const loadLocalData = () => {
    try {
      const userKey = user?.uid || 'guest';
      
      const savedWordsKey = `marlang_saved_words_${userKey}`;
      const storedWords = localStorage.getItem(savedWordsKey);
      if (storedWords) {
        setSavedWords(JSON.parse(storedWords));
      }

      const likedArticlesKey = `marlang_liked_articles_${userKey}`;
      const storedLiked = localStorage.getItem(likedArticlesKey);
      if (storedLiked) {
        setLikedArticles(JSON.parse(storedLiked));
      }

      const settingsKey = `marlang_user_settings_${userKey}`;
      const storedSettings = localStorage.getItem(settingsKey);
      if (storedSettings) {
        setUserSettings(prev => ({
          ...prev,
          ...JSON.parse(storedSettings)
        }));
      }

      const viewRecordsKey = `marlang_view_records_${userKey}`;
      const storedRecords = localStorage.getItem(viewRecordsKey);
      if (storedRecords) {
        setViewRecords(JSON.parse(storedRecords));
      }
    } catch (error) {
      console.error('‚ùå Î°úÏª¨ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
    }
  };

  // FirebaseÏóê Îã®Ïñ¥Ïû• Ï†ÄÏû•
  const saveSavedWordsToFirebase = async (words) => {
    if (!user?.uid) {
      // Í≤åÏä§Ìä∏ Î™®ÎìúÎäî Î°úÏª¨ Ï†ÄÏû•
      localStorage.setItem(`marlang_saved_words_guest`, JSON.stringify(words));
      return;
    }

    try {
      const savedWordsRef = doc(db, 'users', user.uid, 'data', 'savedWords');
      await setDoc(savedWordsRef, {
        words: words,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Îã®Ïñ¥Ïû• Firebase Ï†ÄÏû• ÏôÑÎ£å');
      setIsOnline(true);
      setSyncError(null);
    } catch (error) {
      console.error('‚ùå Îã®Ïñ¥Ïû• Firebase Ï†ÄÏû• Ïã§Ìå®:', error);
      setSyncError('Îã®Ïñ¥Ïû• ÎèôÍ∏∞Ìôî Ïã§Ìå®');
      setIsOnline(false);
      // Ïò§Î•ò Ïãú Î°úÏª¨ Ï†ÄÏû•ÏúºÎ°ú Ìè¥Î∞±
      localStorage.setItem(`marlang_saved_words_${user.uid}`, JSON.stringify(words));
    }
  };

  // FirebaseÏóê Ï¢ãÏïÑÏöî Ï†ÄÏû•
  const saveLikedArticlesToFirebase = async (articles) => {
    if (!user?.uid) {
      // Í≤åÏä§Ìä∏ Î™®ÎìúÎäî Î°úÏª¨ Ï†ÄÏû•
      localStorage.setItem(`marlang_liked_articles_guest`, JSON.stringify(articles));
      return;
    }

    try {
      const likedArticlesRef = doc(db, 'users', user.uid, 'data', 'likedArticles');
      await setDoc(likedArticlesRef, {
        articles: articles,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Ï¢ãÏïÑÏöî Firebase Ï†ÄÏû• ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå Ï¢ãÏïÑÏöî Firebase Ï†ÄÏû• Ïã§Ìå®:', error);
      // Ïò§Î•ò Ïãú Î°úÏª¨ Ï†ÄÏû•ÏúºÎ°ú Ìè¥Î∞±
      localStorage.setItem(`marlang_liked_articles_${user.uid}`, JSON.stringify(articles));
    }
  };

  // FirebaseÏóê ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Ï†ÄÏû•
  const saveSettingsToFirebase = async (settings) => {
    if (!user?.uid) {
      // Í≤åÏä§Ìä∏ Î™®ÎìúÎäî Î°úÏª¨ Ï†ÄÏû•
      localStorage.setItem(`marlang_user_settings_guest`, JSON.stringify(settings));
      return;
    }

    try {
      const settingsRef = doc(db, 'users', user.uid, 'data', 'settings');
      await setDoc(settingsRef, {
        settings: settings,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Firebase Ï†ÄÏû• ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå ÏÇ¨Ïö©Ïûê ÏÑ§Ï†ï Firebase Ï†ÄÏû• Ïã§Ìå®:', error);
      // Ïò§Î•ò Ïãú Î°úÏª¨ Ï†ÄÏû•ÏúºÎ°ú Ìè¥Î∞±
      localStorage.setItem(`marlang_user_settings_${user.uid}`, JSON.stringify(settings));
    }
  };

  // FirebaseÏóê Ï°∞Ìöå Í∏∞Î°ù Ï†ÄÏû•
  const saveViewRecordsToFirebase = async (records) => {
    if (!user?.uid) {
      // Í≤åÏä§Ìä∏ Î™®ÎìúÎäî Î°úÏª¨ Ï†ÄÏû•
      localStorage.setItem(`marlang_view_records_guest`, JSON.stringify(records));
      return;
    }

    try {
      const viewRecordsRef = doc(db, 'users', user.uid, 'data', 'viewRecords');
      await setDoc(viewRecordsRef, {
        records: records,
        updatedAt: serverTimestamp()
      });
      console.log('‚úÖ Ï°∞Ìöå Í∏∞Î°ù Firebase Ï†ÄÏû• ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå Ï°∞Ìöå Í∏∞Î°ù Firebase Ï†ÄÏû• Ïã§Ìå®:', error);
      // Ïò§Î•ò Ïãú Î°úÏª¨ Ï†ÄÏû•ÏúºÎ°ú Ìè¥Î∞±
      localStorage.setItem(`marlang_view_records_${user.uid}`, JSON.stringify(records));
    }
  };

  // ÏÇ¨Ïö©Ïûê Î≥ÄÍ≤Ω Ïãú Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    loadUserData();
  }, [user?.uid]);

  // Îã®Ïñ¥ Ï†ÄÏû• Ïó¨Î∂Ä ÌôïÏù∏
  const isWordSaved = (word) => {
    if (!word) return false;
    return savedWords.some(savedWord => 
      savedWord.word?.toLowerCase() === word.toLowerCase()
    );
  };

  // Îã®Ïñ¥ Ï∂îÍ∞Ä (ArticleDetailÏóêÏÑú ÏÇ¨Ïö©ÌïòÎäî ÏãúÍ∑∏ÎãàÏ≤ò)
  const addWord = async (word, definition, articleId, articleTitle, secondaryDefinition, example, partOfSpeech) => {
    try {
      // Í∏∞Ï°¥ Îã®Ïñ¥ Ï≤¥ÌÅ¨
      const wordExists = savedWords.find(w => 
        w.word?.toLowerCase() === word?.toLowerCase()
      );
      
      if (wordExists) {
        console.log('Îã®Ïñ¥Í∞Ä Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï©ÎãàÎã§:', word);
        return false;
      }

      const newWord = {
        id: `word_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        word: word,
        definition: definition,
        secondaryDefinition: secondaryDefinition || '',
        example: example || '',
        partOfSpeech: partOfSpeech || '',
        articleId: articleId,
        articleTitle: articleTitle,
        addedAt: new Date().toISOString(),
        createdAt: new Date().toISOString()
      };

      const updatedWords = [...savedWords, newWord];
      setSavedWords(updatedWords);
      await saveSavedWordsToFirebase(updatedWords);
      
      console.log('‚úÖ Îã®Ïñ¥ Ï∂îÍ∞Ä ÏôÑÎ£å:', newWord.word);
      return true;
    } catch (error) {
      console.error('‚ùå Îã®Ïñ¥ Ï∂îÍ∞Ä Ïã§Ìå®:', error);
      return false;
    }
  };

  // Îã®Ïñ¥ Ï†úÍ±∞
  const removeWord = async (wordId) => {
    try {
      const updatedWords = savedWords.filter(word => word.id !== wordId);
      setSavedWords(updatedWords);
      await saveSavedWordsToFirebase(updatedWords);
      console.log('‚úÖ Îã®Ïñ¥ Ï†úÍ±∞ ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå Îã®Ïñ¥ Ï†úÍ±∞ Ïã§Ìå®:', error);
    }
  };

  // Îã®Ïñ¥ Ï†ïÎ†¨
  const sortWords = (sortBy = 'addedAt', order = 'desc') => {
    const sorted = [...savedWords].sort((a, b) => {
      if (order === 'desc') {
        return new Date(b[sortBy]) - new Date(a[sortBy]);
      } else {
        return new Date(a[sortBy]) - new Date(b[sortBy]);
      }
    });
    setSavedWords(sorted);
  };

  // Ï¢ãÏïÑÏöî ÌÜ†Í∏Ä
  const toggleLike = async (article) => {
    try {
      const isLiked = likedArticles.some(liked => liked.id === article.id);
      
      if (isLiked) {
        await removeLikedArticle(article.id);
        return false;
      } else {
        await addLikedArticle(article);
        return true;
      }
    } catch (error) {
      console.error('‚ùå Ï¢ãÏïÑÏöî ÌÜ†Í∏Ä Ïã§Ìå®:', error);
      return false;
    }
  };

  // Í∏∞ÏÇ¨ Ï¢ãÏïÑÏöî Ïó¨Î∂Ä ÌôïÏù∏
  const isArticleLiked = (articleId) => {
    return likedArticles.some(article => article.id === articleId);
  };

  // Ï¢ãÏïÑÏöî Í∏∞ÏÇ¨ Ï∂îÍ∞Ä
  const addLikedArticle = async (article) => {
    try {
      const alreadyLiked = likedArticles.find(liked => liked.id === article.id);
      if (alreadyLiked) {
        console.log('Ïù¥ÎØ∏ Ï¢ãÏïÑÏöîÌïú Í∏∞ÏÇ¨ÏûÖÎãàÎã§:', article.id);
        return false;
      }

      const likedArticle = {
        ...article,
        likedAt: new Date().toISOString()
      };

      const updatedLiked = [...likedArticles, likedArticle];
      setLikedArticles(updatedLiked);
      await saveLikedArticlesToFirebase(updatedLiked);
      
      console.log('‚úÖ Ï¢ãÏïÑÏöî Ï∂îÍ∞Ä ÏôÑÎ£å:', article.title);
      return true;
    } catch (error) {
      console.error('‚ùå Ï¢ãÏïÑÏöî Ï∂îÍ∞Ä Ïã§Ìå®:', error);
      return false;
    }
  };

  // Ï¢ãÏïÑÏöî Í∏∞ÏÇ¨ Ï†úÍ±∞
  const removeLikedArticle = async (articleId) => {
    try {
      const updatedLiked = likedArticles.filter(article => article.id !== articleId);
      setLikedArticles(updatedLiked);
      await saveLikedArticlesToFirebase(updatedLiked);
      console.log('‚úÖ Ï¢ãÏïÑÏöî Ï†úÍ±∞ ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå Ï¢ãÏïÑÏöî Ï†úÍ±∞ Ïã§Ìå®:', error);
    }
  };

  // Ï¢ãÏïÑÏöî Í∏∞ÏÇ¨ Ï†ïÎ†¨
  const sortLikedArticles = (sortBy = 'likedAt', order = 'desc') => {
    const sorted = [...likedArticles].sort((a, b) => {
      if (order === 'desc') {
        return new Date(b[sortBy]) - new Date(a[sortBy]);
      } else {
        return new Date(a[sortBy]) - new Date(b[sortBy]);
      }
    });
    setLikedArticles(sorted);
  };

  // Ï°∞Ìöå Í∏∞Î°ù Ï∂îÍ∞Ä
  const addViewRecord = async (articleData) => {
    try {
      const viewRecord = {
        articleId: articleData.id,
        title: articleData.title,
        category: articleData.category,
        viewedAt: new Date().toISOString(),
        summary: articleData.summary
      };

      // Ï§ëÎ≥µ Ï†úÍ±∞ (Í∞ôÏùÄ Í∏∞ÏÇ¨Ïùò ÏµúÍ∑º Ï°∞Ìöå Í∏∞Î°ùÎßå Ïú†ÏßÄ)
      const filteredRecords = viewRecords.filter(record => record.articleId !== articleData.id);
      const updatedRecords = [viewRecord, ...filteredRecords].slice(0, 100); // ÏµúÎåÄ 100Í∞ú Ïú†ÏßÄ

      setViewRecords(updatedRecords);
      await saveViewRecordsToFirebase(updatedRecords);
      console.log('‚úÖ Ï°∞Ìöå Í∏∞Î°ù Ï∂îÍ∞Ä ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå Ï°∞Ìöå Í∏∞Î°ù Ï∂îÍ∞Ä Ïã§Ìå®:', error);
    }
  };

  // ÌôúÎèô ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
  const updateActivityTime = async () => {
    try {
      const updatedSettings = {
        ...userSettings,
        lastActivityTime: new Date().toISOString()
      };
      setUserSettings(updatedSettings);
      await saveSettingsToFirebase(updatedSettings);
    } catch (error) {
      console.error('‚ùå ÌôúÎèô ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
    }
  };

  // IDÎ°ú Í∏∞ÏÇ¨ Ï∞æÍ∏∞ (Ï°∞Ìöå Í∏∞Î°ùÏóêÏÑú)
  const getArticleById = (articleId) => {
    return viewRecords.find(record => record.articleId === articleId) || null;
  };

  // ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏
  const updateSettings = async (newSettings) => {
    try {
      const updatedSettings = {
        ...userSettings,
        ...newSettings,
        lastUpdated: new Date().toISOString()
      };
      setUserSettings(updatedSettings);
      await saveSettingsToFirebase(updatedSettings);
      console.log('‚úÖ ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
    } catch (error) {
      console.error('‚ùå ÏÑ§Ï†ï ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error);
    }
  };

  // ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ Í≥ÑÏÇ∞
  const getStats = () => {
    const totalWords = savedWords.length;
    const totalLikedArticles = likedArticles.length;
    
    // Ïù¥Î≤à Ï£ºÏóê Ï∂îÍ∞ÄÎêú Îã®Ïñ¥ Ïàò
    const weekAgo = new Date();
    weekAgo.setDate(weekAgo.getDate() - 7);
    const wordsThisWeek = savedWords.filter(word => 
      new Date(word.addedAt) > weekAgo
    ).length;

    // ÏÑ†Ìò∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Í≥ÑÏÇ∞
    const categoryCount = {};
    likedArticles.forEach(article => {
      if (article.category) {
        categoryCount[article.category] = (categoryCount[article.category] || 0) + 1;
      }
    });
    
    const favoriteCategory = Object.keys(categoryCount).reduce((a, b) => 
      categoryCount[a] > categoryCount[b] ? a : b, 
      Object.keys(categoryCount)[0] || ''
    );

    return {
      totalWords,
      totalLikedArticles,
      wordsThisWeek,
      favoriteCategory: {
        name: favoriteCategory,
        count: categoryCount[favoriteCategory] || 0
      }
    };
  };

  const value = {
    savedWords,
    likedArticles,
    userSettings,
    viewRecords,
    isLoading,
    syncError,
    isOnline,
    addWord,
    removeWord,
    sortWords,
    isWordSaved,
    toggleLike,
    isArticleLiked,
    addLikedArticle,
    removeLikedArticle,
    sortLikedArticles,
    addViewRecord,
    updateActivityTime,
    getArticleById,
    updateSettings,
    getStats
  };

  return (
    <DataContext.Provider value={value}>
      {children}
    </DataContext.Provider>
  );
};
